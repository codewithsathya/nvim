{
	"pbds": {
		"prefix": "pbds",
		"description": "",
		"scope": "cpp",
		"body": [
			"#include <ext/pb_ds/assoc_container.hpp>",
			"#include <ext/pb_ds/tree_policy.hpp>",
			"using namespace __gnu_pbds;",
			"",
			"typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;"
		]
	},
	"Import for debugging": {
		"prefix": "dbg",
		"description": "Import for debugging",
		"scope": "cpp",
		"body": [
			"#ifndef ONLINE_JUDGE",
			"#include <cf/debug.h>",
			"#else",
			"#define debug(...) 5",
			"#define debugArr(...) 10",
			"#endif"
		]
	},
	"loop for test cases": {
		"prefix": "tt",
		"description": "loop for test cases",
		"scope": "cpp",
		"body": [
			"int t;",
			"  cin >> t;",
			"  while(t--) {",
			"     $0",
			"  }"
		]
	},
	"CP template": {
		"prefix": "init",
		"description": "",
		"scope": "cpp",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"using ll = long long;",
			"",
			"int MOD = 1000000009;",
			"",
			"int main() {",
			"  ios::sync_with_stdio(false);",
			"  cin.tie(nullptr);",
			"  $0",
			"  return 0;",
			"}"
		]
	},
	"CP template for test cases": {
		"prefix": "inits",
		"description": "CP template for test cases",
		"scope": "cpp",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"using ll = long long;",
			"",
			"int MOD = 1000000009;",
			"",
			"void solve() {",
			"  $0",
			"}",
			"",
			"int main() {",
			"  ios::sync_with_stdio(false);",
			"  cin.tie(nullptr);",
			"  int t;",
			"  cin >> t;",
			"  while(t--) {",
			"    solve();",
			"  }",
			"  return 0;",
			"}"
		]
	}
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}
